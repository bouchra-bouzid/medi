const express = require("express");
const router = express.Router();
const { protect } = require("../middleware/authMiddleware");
const appointmentController = require("../controllers/appointmentController");
const Appointment = require("../models/Appointment"); // V√©rifie le chemin exact

// üîπ M√©decin cr√©e un cr√©neau
router.post("/slot", protect, appointmentController.createSlot);

// üîπ M√©decin cr√©e des cr√©neaux r√©currents
router.post("/slot/recurring", protect, appointmentController.createRecurringSlots);

// üîπ Patient r√©serve un cr√©neau
router.post("/book", protect, appointmentController.bookAppointment);

// üîπ M√©decin confirme / annule / compl√®te un rendez-vous
router.put("/status/:id", protect, appointmentController.updateStatus);

// üîπ Patient annule un rendez-vous
router.put("/cancel/:id", protect, appointmentController.cancelAppointment);

// üîπ Liste des cr√©neaux disponibles pour les patients
router.get("/available", protect, appointmentController.getAvailableSlots);

// üîπ Liste des rendez-vous du m√©decin
router.get("/doctor", protect, appointmentController.getDoctorAppointments);

// üîπ Liste des rendez-vous du patient
router.get("/patient", protect, appointmentController.getPatientAppointments);

// üîπ Historique des rendez-vous pass√©s (m√©decin et patient)
router.get("/history", protect, appointmentController.getPastAppointments);

// route publique pour r√©cup√©rer les cr√©neaux d'un m√©decin
router.get("/doctor/:doctorId", appointmentController.getSlotsByDoctorPublic);

// ü©µ Route pour le m√©decin connect√©
// üîπ R√©cup√©rer les cr√©neaux du m√©decin connect√©
router.get("/mine", protect, async (req, res) => {
  try {
    if (req.user.role !== "doctor") {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    const slots = await Appointment.find({ doctor: req.user._id });
    res.json(slots);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üîπ R√©cup√©rer les rendez-vous non lus pour un m√©decin
router.get("/unread/:doctorId", protect, async (req, res) => {
  try {
    const { doctorId } = req.params;
    console.log("Backend: fetch unread appointments pour doctorId:", doctorId);

    // Cherche les rendez-vous avec status "unread" pour ce m√©decin
    const unreadAppointments = await Appointment.find({
      doctor: doctorId,
      status: "unread",
    });

    res.json({
      count: unreadAppointments.length,
      appointments: unreadAppointments,
    });
  } catch (err) {
    console.error("Erreur fetch unread appointments:", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
});


// üîπ Supprimer un cr√©neau (m√©decin)
router.delete("/:id", protect, async (req, res) => {
  try {
    const slot = await Appointment.findById(req.params.id);

    if (!slot) {
      return res.status(404).json({ message: "Cr√©neau non trouv√©" });
    }

    // V√©rifier que le cr√©neau appartient au m√©decin connect√©
    if (slot.doctor.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    // AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    if (slot.status !== "available") {
      return res.status(400).json({ message: "Impossible de supprimer un rendez-vous d√©j√† pris" });
    }

    await slot.deleteOne();
    res.json({ message: "Cr√©neau supprim√© avec succ√®s !" });
  } catch (err) {
    console.error("Erreur suppression cr√©neau:", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
});


module.exports = router;
